{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { BASE_URL } from \"../utils/apiURL\";\nimport { STATUS } from \"../utils/status\";\nconst initialState = {\n  categories: [],\n  categoriesStatus: STATUS.IDLE,\n  categoryProducts: [],\n  categoryProductsStatus: STATUS.IDLE\n};\nconst categorySlice = createSlice({\n  name: 'category',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchAsyncCategories.pending, (state, action) => {\n      state.categoriesStatus = STATUS.LOADING;\n    }).addCase(fetchAsyncCategories.fulfilled, (state, action) => {\n      console.log('Received categories:', action.payload); // Debug log\n\n      state.categories = action.payload.map(category => {\n        if (typeof category === 'string') {\n          return {\n            slug: category.toLowerCase().replace(' ', '-'),\n            name: category,\n            url: `/category/${category.toLowerCase().replace(' ', '-')}`\n          };\n        } else if (typeof category === 'object' && category !== null) {\n          return {\n            slug: category.slug || category.name && category.name.toLowerCase().replace(' ', '-') || '',\n            name: category.name || '',\n            url: category.url || `/category/${category.slug || category.name && category.name.toLowerCase().replace(' ', '-') || ''}`\n          };\n        } else {\n          console.error('Invalid category:', category);\n          return null;\n        }\n      }).filter(Boolean); // Remove any null entries\n\n      state.categoriesStatus = STATUS.SUCCEEDED;\n    }).addCase(fetchAsyncCategories.rejected, (state, action) => {\n      state.categoriesStatus = STATUS.FAILED;\n    }).addCase(fetchAsyncProductsOfCategory.pending, (state, action) => {\n      state.categoryProductsStatus = STATUS.LOADING;\n    }).addCase(fetchAsyncProductsOfCategory.fulfilled, (state, action) => {\n      state.categoryProducts = action.payload;\n      state.categoryProductsStatus = STATUS.SUCCEEDED;\n    }).addCase(fetchAsyncProductsOfCategory.rejected, (state, action) => {\n      state.categoryProductsStatus = STATUS.FAILED;\n    });\n  }\n});\nexport const fetchAsyncCategories = createAsyncThunk('categories/fetch', async () => {\n  const response = await fetch(`${BASE_URL}products/categories`);\n  const data = await response.json();\n  console.log('API response:', data); // Debug log\n  return data;\n});\nexport const fetchAsyncProductsOfCategory = createAsyncThunk('category-products/fetch', async category => {\n  const response = await fetch(`${BASE_URL}products/category/${category}`);\n  const data = await response.json();\n  return data.products;\n});\nexport const getAllCategories = state => state.category.categories;\nexport const getAllProductsByCategory = state => state.category.categoryProducts;\nexport const getCategoryProductsStatus = state => state.category.categoryProductsStatus;\nexport default categorySlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","BASE_URL","STATUS","initialState","categories","categoriesStatus","IDLE","categoryProducts","categoryProductsStatus","categorySlice","name","reducers","extraReducers","builder","addCase","fetchAsyncCategories","pending","state","action","LOADING","fulfilled","console","log","payload","map","category","slug","toLowerCase","replace","url","error","filter","Boolean","SUCCEEDED","rejected","FAILED","fetchAsyncProductsOfCategory","response","fetch","data","json","products","getAllCategories","getAllProductsByCategory","getCategoryProductsStatus","reducer"],"sources":["/home/fardosa/Project5/snapup-commerce-site-react-js/src/store/categorySlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { BASE_URL } from \"../utils/apiURL\";\nimport { STATUS } from \"../utils/status\";\n\nconst initialState = {\n    categories: [],\n    categoriesStatus: STATUS.IDLE,\n    categoryProducts: [],\n    categoryProductsStatus: STATUS.IDLE\n}\n\nconst categorySlice = createSlice({\n    name: 'category',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n        .addCase(fetchAsyncCategories.pending, (state, action) => {\n            state.categoriesStatus = STATUS.LOADING;\n        })\n\n        .addCase(fetchAsyncCategories.fulfilled, (state, action) => {\n            console.log('Received categories:', action.payload); // Debug log\n            \n            state.categories = action.payload.map(category => {\n                if (typeof category === 'string') {\n                    return {\n                        slug: category.toLowerCase().replace(' ', '-'),\n                        name: category,\n                        url: `/category/${category.toLowerCase().replace(' ', '-')}`\n                    };\n                } else if (typeof category === 'object' && category !== null) {\n                    return {\n                        slug: category.slug || (category.name && category.name.toLowerCase().replace(' ', '-')) || '',\n                        name: category.name || '',\n                        url: category.url || `/category/${category.slug || (category.name && category.name.toLowerCase().replace(' ', '-')) || ''}`\n                    };\n                } else {\n                    console.error('Invalid category:', category);\n                    return null;\n                }\n            }).filter(Boolean); // Remove any null entries\n            \n            state.categoriesStatus = STATUS.SUCCEEDED;\n        })\n\n        .addCase(fetchAsyncCategories.rejected, (state, action) => {\n            state.categoriesStatus = STATUS.FAILED;\n        })\n\n        .addCase(fetchAsyncProductsOfCategory.pending, (state, action) => {\n            state.categoryProductsStatus = STATUS.LOADING;\n        })\n\n        .addCase(fetchAsyncProductsOfCategory.fulfilled, (state, action) => {\n            state.categoryProducts = action.payload;\n            state.categoryProductsStatus = STATUS.SUCCEEDED;\n        })\n\n        .addCase(fetchAsyncProductsOfCategory.rejected, (state, action) => {\n            state.categoryProductsStatus = STATUS.FAILED;\n        })\n    }\n});\n\nexport const fetchAsyncCategories = createAsyncThunk('categories/fetch', async() => {\n    const response = await fetch(`${BASE_URL}products/categories`);\n    const data = await response.json();\n    console.log('API response:', data); // Debug log\n    return data;\n});\n\nexport const fetchAsyncProductsOfCategory = createAsyncThunk('category-products/fetch', async(category) => {\n    const response = await fetch(`${BASE_URL}products/category/${category}`);\n    const data = await response.json();\n    return data.products;\n});\n\nexport const getAllCategories = (state) => state.category.categories;\nexport const getAllProductsByCategory = (state) => state.category.categoryProducts;\nexport const getCategoryProductsStatus = (state) => state.category.categoryProductsStatus;\nexport default categorySlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}