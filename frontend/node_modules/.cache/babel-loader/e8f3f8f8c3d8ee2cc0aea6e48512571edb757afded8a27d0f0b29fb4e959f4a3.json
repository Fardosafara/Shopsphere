{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { BASE_URL } from \"../utils/apiURL\";\nimport { STATUS } from \"../utils/status\";\nconst initialState = {\n  categories: [],\n  categoriesStatus: STATUS.IDLE,\n  categoryProducts: [],\n  categoryProductsStatus: STATUS.IDLE\n};\nconst categorySlice = createSlice({\n  name: 'category',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchAsyncCategories.pending, (state, action) => {\n      state.categoriesStatus = STATUS.LOADING;\n    }).addCase(fetchAsyncCategories.fulfilled, (state, action) => {\n      console.log('Received categories:', action.payload); // Debug log\n\n      // Check if payload is an array\n      if (Array.isArray(action.payload)) {\n        state.categories = action.payload.map(category => {\n          if (typeof category === 'string') {\n            return {\n              slug: category.toLowerCase().replace(' ', '-'),\n              name: category,\n              url: `/category/${category.toLowerCase().replace(' ', '-')}`\n            };\n          } else if (typeof category === 'object' && category !== null) {\n            var _category$name, _category$name2;\n            // If category is already an object, use its properties\n            return {\n              slug: category.slug || ((_category$name = category.name) === null || _category$name === void 0 ? void 0 : _category$name.toLowerCase().replace(' ', '-')) || '',\n              name: category.name || '',\n              url: category.url || `/category/${category.slug || ((_category$name2 = category.name) === null || _category$name2 === void 0 ? void 0 : _category$name2.toLowerCase().replace(' ', '-')) || ''}`\n            };\n          } else {\n            console.error('Invalid category:', category);\n            return null;\n          }\n        }).filter(Boolean); // Remove any null entries\n      } else {\n        console.error('Received payload is not an array:', action.payload);\n        state.categories = [];\n      }\n      state.categoriesStatus = STATUS.SUCCEEDED;\n    }).addCase(fetchAsyncCategories.rejected, (state, action) => {\n      state.categoriesStatus = STATUS.FAILED;\n    }).addCase(fetchAsyncProductsOfCategory.pending, (state, action) => {\n      state.categoryProductsStatus = STATUS.LOADING;\n    }).addCase(fetchAsyncProductsOfCategory.fulfilled, (state, action) => {\n      state.categoryProducts = action.payload;\n      state.categoryProductsStatus = STATUS.SUCCEEDED;\n    }).addCase(fetchAsyncProductsOfCategory.rejected, (state, action) => {\n      state.categoryProductsStatus = STATUS.FAILED;\n    });\n  }\n});\nexport const fetchAsyncCategories = createAsyncThunk('categories/fetch', async () => {\n  const response = await fetch(`${BASE_URL}products/categories`);\n  const data = await response.json();\n  console.log('API response:', data); // Debug log\n  return data;\n});\nexport const fetchAsyncProductsOfCategory = createAsyncThunk('category-products/fetch', async category => {\n  const response = await fetch(`${BASE_URL}products/category/${category}`);\n  const data = await response.json();\n  return data.products;\n});\nexport const getAllCategories = state => state.category.categories;\nexport const getAllProductsByCategory = state => state.category.categoryProducts;\nexport const getCategoryProductsStatus = state => state.category.categoryProductsStatus;\nexport default categorySlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","BASE_URL","STATUS","initialState","categories","categoriesStatus","IDLE","categoryProducts","categoryProductsStatus","categorySlice","name","reducers","extraReducers","builder","addCase","fetchAsyncCategories","pending","state","action","LOADING","fulfilled","console","log","payload","Array","isArray","map","category","slug","toLowerCase","replace","url","error","filter","Boolean","SUCCEEDED","rejected","FAILED","fetchAsyncProductsOfCategory","response","fetch","data","json","products","getAllCategories","getAllProductsByCategory","getCategoryProductsStatus","reducer"],"sources":["/home/fardosa/Project5/snapup-commerce-site-react-js/src/store/categorySlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { BASE_URL } from \"../utils/apiURL\";\nimport { STATUS } from \"../utils/status\";\n\nconst initialState = {\n    categories: [],\n    categoriesStatus: STATUS.IDLE,\n    categoryProducts: [],\n    categoryProductsStatus: STATUS.IDLE\n}\n\nconst categorySlice = createSlice({\n    name: 'category',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n        .addCase(fetchAsyncCategories.pending, (state, action) => {\n            state.categoriesStatus = STATUS.LOADING;\n        })\n\n        .addCase(fetchAsyncCategories.fulfilled, (state, action) => {\n            console.log('Received categories:', action.payload); // Debug log\n            \n            // Check if payload is an array\n            if (Array.isArray(action.payload)) {\n                state.categories = action.payload.map(category => {\n                    if (typeof category === 'string') {\n                        return {\n                            slug: category.toLowerCase().replace(' ', '-'),\n                            name: category,\n                            url: `/category/${category.toLowerCase().replace(' ', '-')}`\n                        };\n                    } else if (typeof category === 'object' && category !== null) {\n                        // If category is already an object, use its properties\n                        return {\n                            slug: category.slug || category.name?.toLowerCase().replace(' ', '-') || '',\n                            name: category.name || '',\n                            url: category.url || `/category/${category.slug || category.name?.toLowerCase().replace(' ', '-') || ''}`\n                        };\n                    } else {\n                        console.error('Invalid category:', category);\n                        return null;\n                    }\n                }).filter(Boolean); // Remove any null entries\n            } else {\n                console.error('Received payload is not an array:', action.payload);\n                state.categories = [];\n            }\n            \n            state.categoriesStatus = STATUS.SUCCEEDED;\n        })\n\n        .addCase(fetchAsyncCategories.rejected, (state, action) => {\n            state.categoriesStatus = STATUS.FAILED;\n        })\n\n        .addCase(fetchAsyncProductsOfCategory.pending, (state, action) => {\n            state.categoryProductsStatus = STATUS.LOADING;\n        })\n\n        .addCase(fetchAsyncProductsOfCategory.fulfilled, (state, action) => {\n            state.categoryProducts = action.payload;\n            state.categoryProductsStatus = STATUS.SUCCEEDED;\n        })\n\n        .addCase(fetchAsyncProductsOfCategory.rejected, (state, action) => {\n            state.categoryProductsStatus = STATUS.FAILED;\n        })\n    }\n});\n\nexport const fetchAsyncCategories = createAsyncThunk('categories/fetch', async() => {\n    const response = await fetch(`${BASE_URL}products/categories`);\n    const data = await response.json();\n    console.log('API response:', data); // Debug log\n    return data;\n});\n\nexport const fetchAsyncProductsOfCategory = createAsyncThunk('category-products/fetch', async(category) => {\n    const response = await fetch(`${BASE_URL}products/category/${category}`);\n    const data = await response.json();\n    return data.products;\n});\n\nexport const getAllCategories = (state) => state.category.categories;\nexport const getAllProductsByCategory = (state) => state.category.categoryProducts;\nexport const getCategoryProductsStatus = (state) => state.category.categoryProductsStatus;\n\nexport default categorySlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}