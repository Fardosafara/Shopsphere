{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { BASE_URL } from \"../utils/apiURL\";\nimport { STATUS } from \"../utils/status\";\nconst initialState = {\n  categories: [],\n  categoriesStatus: STATUS.IDLE,\n  categoryProducts: [],\n  categoryProductsStatus: STATUS.IDLE\n};\nconst categorySlice = createSlice({\n  name: 'category',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchAsyncCategories.pending, (state, action) => {\n      state.categoriesStatus = STATUS.LOADING;\n    }).addCase(fetchAsyncCategories.fulfilled, (state, action) => {\n      // Transform categories into the required format\n      state.categories = action.payload.map(category => {\n        // Assuming each category object has a 'name' property\n        const categoryName = category.name || 'Unknown';\n        const slug = categoryName.toLowerCase().replace(/ /g, '-');\n        return {\n          slug: slug,\n          name: categoryName,\n          url: `/category/${slug}`\n        };\n      });\n      state.categoriesStatus = STATUS.SUCCEEDED;\n    }).addCase(fetchAsyncCategories.rejected, (state, action) => {\n      state.categoriesStatus = STATUS.FAILED;\n    }).addCase(fetchAsyncProductsOfCategory.pending, (state, action) => {\n      state.categoryProductsStatus = STATUS.LOADING;\n    }).addCase(fetchAsyncProductsOfCategory.fulfilled, (state, action) => {\n      state.categoryProducts = action.payload;\n      state.categoryProductsStatus = STATUS.SUCCEEDED;\n    }).addCase(fetchAsyncProductsOfCategory.rejected, (state, action) => {\n      state.categoryProductsStatus = STATUS.FAILED;\n    });\n  }\n});\nexport const fetchAsyncCategories = createAsyncThunk('categories/fetch', async () => {\n  const response = await fetch(`${BASE_URL}products/categories`);\n  const data = await response.json();\n  return data;\n});\nexport const fetchAsyncProductsOfCategory = createAsyncThunk('category-products/fetch', async category => {\n  const response = await fetch(`${BASE_URL}products/category/${category}`);\n  const data = await response.json();\n  return data.products;\n});\nexport const getAllCategories = state => state.category.categories;\nexport const getAllProductsByCategory = state => state.category.categoryProducts;\nexport const getCategoryProductsStatus = state => state.category.categoryProductsStatus;\nexport default categorySlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","BASE_URL","STATUS","initialState","categories","categoriesStatus","IDLE","categoryProducts","categoryProductsStatus","categorySlice","name","reducers","extraReducers","builder","addCase","fetchAsyncCategories","pending","state","action","LOADING","fulfilled","payload","map","category","categoryName","slug","toLowerCase","replace","url","SUCCEEDED","rejected","FAILED","fetchAsyncProductsOfCategory","response","fetch","data","json","products","getAllCategories","getAllProductsByCategory","getCategoryProductsStatus","reducer"],"sources":["/home/fardowsa123/Shopsphere/frontend/src/store/categorySlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { BASE_URL } from \"../utils/apiURL\";\nimport { STATUS } from \"../utils/status\";\n\nconst initialState = {\n    categories: [],\n    categoriesStatus: STATUS.IDLE,\n    categoryProducts: [],\n    categoryProductsStatus: STATUS.IDLE\n}\n\nconst categorySlice = createSlice({\n    name: 'category',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n        .addCase(fetchAsyncCategories.pending, (state, action) => {\n            state.categoriesStatus = STATUS.LOADING;\n        })\n\n        .addCase(fetchAsyncCategories.fulfilled, (state, action) => {\n            // Transform categories into the required format\n            state.categories = action.payload.map(category => {\n                // Assuming each category object has a 'name' property\n                const categoryName = category.name || 'Unknown';\n                const slug = categoryName.toLowerCase().replace(/ /g, '-');\n                return {\n                    slug: slug,\n                    name: categoryName,\n                    url: `/category/${slug}`\n                };\n            });\n            state.categoriesStatus = STATUS.SUCCEEDED;\n        })\n        .addCase(fetchAsyncCategories.rejected, (state, action) => {\n            state.categoriesStatus = STATUS.FAILED;\n        })\n\n        .addCase(fetchAsyncProductsOfCategory.pending, (state, action) => {\n            state.categoryProductsStatus = STATUS.LOADING;\n        })\n\n        .addCase(fetchAsyncProductsOfCategory.fulfilled, (state, action) => {\n            state.categoryProducts = action.payload;\n            state.categoryProductsStatus = STATUS.SUCCEEDED;\n        })\n\n        .addCase(fetchAsyncProductsOfCategory.rejected, (state, action) => {\n            state.categoryProductsStatus = STATUS.FAILED;\n        })\n    }\n});\n\nexport const fetchAsyncCategories = createAsyncThunk('categories/fetch', async() => {\n    const response = await fetch(`${BASE_URL}products/categories`);\n    const data = await response.json();\n    return data;\n});\n\nexport const fetchAsyncProductsOfCategory = createAsyncThunk('category-products/fetch', async(category) => {\n    const response = await fetch(`${BASE_URL}products/category/${category}`);\n    const data = await response.json();\n    return data.products;\n});\n\nexport const getAllCategories = (state) => state.category.categories;\nexport const getAllProductsByCategory = (state) => state.category.categoryProducts;\nexport const getCategoryProductsStatus = (state) => state.category.categoryProductsStatus;\nexport default categorySlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}